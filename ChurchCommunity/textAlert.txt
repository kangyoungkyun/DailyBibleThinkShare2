let alertController = UIAlertController(
title: nil,
message: "알림.",
preferredStyle: .alert)


//let loginAction = UIAlertAction(title: "수정", style: .default) { (_) in
//let loginTextField        = alertController.textFields![0] as! UITextField
//let passwordTextField     = alertController.textFields![1] as! UITextField

//login(loginTextField.text, passwordTextField.text)
//}

//loginAction.isEnabled = false


/*
alertController.addTextField { (textField) in
textField.placeholder = "Login"
NotificationCenter.default.addObserver(forName: NSNotification.Name.UITextFieldTextDidChange, object: textField, queue: OperationQueue.main) { (notification) in
print("\(textField.text)")
loginAction.isEnabled = textField.text != ""
}
}

alertController.addTextField { (textField) in
textField.placeholder = "Password"
textField.isSecureTextEntry = true
}
*/


let forgotPasswordAction = UIAlertAction(title: "삭제", style: .destructive, handler: nil)
let cancelAction = UIAlertAction(title: "취소", style: .cancel, handler: nil)

alertController.addAction(loginAction)
alertController.addAction(forgotPasswordAction)
alertController.addAction(cancelAction)

self.present(
alertController,
animated: true,
completion: nil)











func promptForAnswer() {
let ac = UIAlertController(title: "Enter answer", message: nil, preferredStyle: .alert)


ac.addTextField { textField in
let heightConstraint = NSLayoutConstraint(item: textField, attribute: .height, relatedBy: .equal, toItem: nil, attribute: .notAnAttribute, multiplier: 1, constant: 100)

textField.addConstraint(heightConstraint)


}

let submitAction = UIAlertAction(title: "Submit", style: .default) { [unowned ac] _ in
let answer = ac.textFields![0]
print(answer)
}

ac.addAction(submitAction)

present(ac, animated: true)
}











extension CGRect {
init(_ x:CGFloat, _ y:CGFloat, _ w:CGFloat, _ h:CGFloat) {
self.init(x:x, y:y, width:w, height:h)
}

func popUpController()
{

let alertController = UIAlertController(title: "\n\n\n\n\n\n", message: nil, preferredStyle: UIAlertControllerStyle.alert)

let margin:CGFloat = 8.0
let rect = CGRect(margin, margin, alertController.view.bounds.size.width - margin * 15.0, 100.0)
let customView = UITextView(frame: rect)

customView.backgroundColor = UIColor.clear
customView.font = UIFont(name: "Helvetica", size: 15)

alertController.view.addSubview(customView)

let somethingAction = UIAlertAction(title: "수정", style: UIAlertActionStyle.default, handler: {(alert: UIAlertAction!) in print("something")

print(customView.text)

})

let cancelAction = UIAlertAction(title: "취소", style: UIAlertActionStyle.cancel, handler: {(alert: UIAlertAction!) in print("cancel")})

alertController.addAction(somethingAction)
alertController.addAction(cancelAction)

self.present(alertController, animated: true, completion:{})


}



//테이블 뷰 싱글텝 더블텝
https://stackoverflow.com/questions/43153530/single-and-double-taps-on-uitableviewcell-in-swift-3/43299342



https://www.raywenderlich.com/category/ios











//테이블 뷰 셀안에서 이름을 클릭했을때 델리게이트 지정해주는 법
// 1.
protocol PlayVideoCellProtocol {
func playVideoButtonDidSelect()
}

class TableViewCell {
// ...

// 2.
var delegate: PlayVideoCellProtocol!

// 3.
@IBAction func playVideo(sender: AnyObject) {
self.delegate.playVideoButtonDidSelect()
}

// ...
}


class TableViewController: SuperClass, PlayVideoCellProtocol {

// ...

// 4.
func playVideoButtonDidSelect() {
let viewController = ViewController() // Or however you want to create it.
self.presentViewController(viewController, animated: true, completion: nil)
}

func tableView(tableView: UITableView, cellForRowAtIndexPath: NSIndexPath) -> UITableViewCell {
//... Your cell configuration

// 5.
cell.delegate = self

//...
}
//...
}






//완료되면 textfield 커서 사라지고, 키보드 내리기
self.birthTextField.selectedTextRange = nil
self.self.nameTextField.selectedTextRange = nil
self.self.mesageTextField.selectedTextRange = nil

self.birthTextField.resignFirstResponder()
self.self.nameTextField.resignFirstResponder()
self.self.mesageTextField.resignFirstResponder()






//alercontroller안에 피커뷰 넣기


let message = "\n\n\n\n\n\n"
let alert = UIAlertController(title: "Please Select City", message: message, preferredStyle: UIAlertControllerStyle.actionSheet)
alert.isModalInPopover = true

let pickerFrame = UIPickerView(frame: CGRect(x: 5, y: 20, width: SCREEN_WIDTH - 20, height: 140)) // CGRectMake(left, top, width, height) - left and top are like margins
pickerFrame.tag = 555
//set the pickers datasource and delegate
pickerFrame.delegate = self

//Add the picker to the alert controller
alert.view.addSubview(pickerFrame)
let okAction = UIAlertAction(title: "OK", style: .default, handler: {
(alert: UIAlertAction!) -> Void in
//Perform Action
})
alert.addAction(okAction)
let cancelAction = UIAlertAction(title: "Cancel", style: .destructive, handler: nil)
alert.addAction(cancelAction)
self.parent!.present(alert, animated: true, completion: { _ in })







//----------------- 멀티 피커뷰

1.
class birthDate {
var month : [String]
var days: [String]
init(month: [String], days:[String]){
self.month = month
self.days = days
}
}

2.
UIPickerViewDelegate,UIPickerViewDataSource 상속

3.데이터 담을 배열

var birthData = [birthDate]()


4. 반드시 구현해줘야하는 함수


//피커뷰 개수
func numberOfComponents(in pickerView: UIPickerView) -> Int {
return 2
}

//피커뷰의 각 행개수
func pickerView(_ pickerView: UIPickerView, numberOfRowsInComponent component: Int) -> Int {
if component == 0 {
return birthData[0].month.count
}else{
return birthData[0].days.count
}
}
//피커뷰의 데이터 넣기
func pickerView(_ pickerView: UIPickerView, titleForRow row: Int, forComponent component: Int) -> String? {
if component == 0 {
return birthData[0].month[row]
}else{
return birthData[0].days[row]
}
}
//해당 피커뷰를 선택했을 때
func pickerView(_ pickerView: UIPickerView, didSelectRow row: Int, inComponent component: Int) {
pickerView.reloadComponent(1)

let selectedMonth = pickerView.selectedRow(inComponent: 0)
let selectedDay = pickerView.selectedRow(inComponent: 1)
let months = birthData[0].month[selectedMonth]
let day = birthData[0].days[selectedDay]

//텍스트에 뿌려주기
birthTextField.text = "\(months) \(day)"
}




5.초기화때 데이터 만들어 주기
//생일 더미 데이터 넣어주기
birthData.append(birthDate(month: ["1월","2월","3월","4월","5월","6월","7월","8월","9월","10월","11월","12월"],
days: ["1일","2일","3일","4일","5일","6일","7일","8일","9일","10일","11일","12일","13일","14일","15일","16일","17일","18일",
"19일","20일","21일","22일","23일","24일","25일","26일","27일","28일","29일","30일","31일"]))


6. 피커뷰 객체 생성 및 alertController에 넣어주기

//생일란을 선택했을 때 발생하는 이벤트
@objc func handleSelectBirth (){
// print("생일 이벤트~!")
let message = "\n\n\n\n\n\n"
let alert = UIAlertController(title: "태어난 달과 일을 선택해주세요.", message: message, preferredStyle: UIAlertControllerStyle.actionSheet)
alert.isModalInPopover = true


let pickerFrame = UIPickerView() // CGRectMake(left, top, width, height) - left and top are like margins

//set the pickers datasource and delegate
pickerFrame.delegate = self
pickerFrame.dataSource = self


//Add the picker to the alert controller
alert.view.addSubview(pickerFrame)

let okAction = UIAlertAction(title: "확인", style: .default, handler: nil)
alert.addAction(okAction)
self.parent!.present(alert, animated: true) {
print("성공")

}

}






//파이어베이스에 사진 여러장 업로드
https://stackoverflow.com/questions/37769701/uploading-multiple-images-simultaneously-with-google-firebase





//테이블 뷰 인디케이터

var activityIndicatorView: UIActivityIndicatorView!


activityIndicatorView = UIActivityIndicatorView(activityIndicatorStyle: .gray)
activityIndicatorView.translatesAutoresizingMaskIntoConstraints = false
self.view.addSubview(activityIndicatorView)
activityIndicatorView.centerXAnchor.constraint(equalTo: view.centerXAnchor).isActive = true
activityIndicatorView.centerYAnchor.constraint(equalTo: view.centerYAnchor,constant: -60).isActive = true
activityIndicatorView.bringSubview(toFront: self.view)
activityIndicatorView.startAnimating()
tableView.separatorStyle = .none

print("start 인디케이터")

DispatchQueue.main.async {
print("start DispatchQueue")
OperationQueue.main.addOperation() {
print("start OperationQueue")
self.tableView.separatorStyle = .singleLine
Thread.sleep(forTimeInterval: 1.5)
print("start forTimeInterval")
self.activityIndicatorView.stopAnimating()
self.tableView.reloadData()
}
}




//특정 문자 제거하기












//사진 클릭 크게

UIView *view1 = [[UIView alloc]initWithFrame:CGRectMake(0, 50, self.view.frame.size.width , self.view.frame.size.height)];
view1.backgroundColor = [UIColor greenColor];
[self.view.window addSubview:view1];






//탭바 칼라 바꾸기

if let count = self.tabBar.items?.count {
for i in 0...(count-1) {
let imageNameForSelectedState   = arrayOfImageNameForSelectedState[i]
let imageNameForUnselectedState = arrayOfImageNameForUnselectedState[i]

self.tabBar.items?[i].selectedImage = UIImage(named: imageNameForSelectedState)?.withRenderingMode(.alwaysOriginal)
self.tabBar.items?[i].image = UIImage(named: imageNameForUnselectedState)?.withRenderingMode(.alwaysOriginal)
}
}

let selectedColor   = UIColor(red: 246.0/255.0, green: 155.0/255.0, blue: 13.0/255.0, alpha: 1.0)
let unselectedColor = UIColor(red: 16.0/255.0, green: 224.0/255.0, blue: 223.0/255.0, alpha: 1.0)

UITabBarItem.appearance().setTitleTextAttributes([NSForegroundColorAttributeName: unselectedColor], for: .normal)
UITabBarItem.appearance().setTitleTextAttributes([NSForegroundColorAttributeName: selectedColor], for: .selected)








//컬렉션뷰 델리게이트 관련 :https://stackoverflow.com/questions/33796005/present-alertview-from-uicollectionviewcell
The collection view cell should not depend on knowledge of its parent view or view controller in order to maintain a functional separation of responsibilities that is part of a proper app architecture.

Therefore, to get the cell to adopt the behavior of showing an alert, the delegation pattern can be used. This is done by adding a protocol to the view controller that has the collection view.

@protocol CollectionViewCellDelegate: class {
func showAlert()
}
And having the view controller conform to that protocol:

class MyViewController: UIViewController, CollectionViewCellDelegate {
Also add a delegate property to the cell:

weak var delegate: CollectionViewCellDelegate?
Move the showAlert() function inside your collection view controller.

When you make a cell, assign the delegate for the cell to the collection view controller.

func collectionView(collectionView: UICollectionView, cellForItemAtIndexPath indexPath: NSIndexPath) -> UICollectionViewCell {

// Other cell code here.

cell.delegate = self
When it is time to show the alert, have the cell call

delegate.showAlert()






//탭바 스크롤 하면 숨기기
override func scrollViewWillEndDragging(_ scrollView: UIScrollView, withVelocity velocity: CGPoint, targetContentOffset: UnsafeMutablePointer<CGPoint>) {
if scrollView.panGestureRecognizer.translation(in: scrollView).y < 0{
changeTabBar(hidden: true, animated: true)
}
else{
changeTabBar(hidden: false, animated: true)
}
}
func changeTabBar(hidden:Bool, animated: Bool){
print("changeTabbar")
guard let tabBar = self.tabBarController?.tabBar else { return; }
if tabBar.isHidden == hidden{ return }
let frame = tabBar.frame
let offset = hidden ? frame.size.height : -frame.size.height
let duration:TimeInterval = (animated ? 0.5 : 0.0)
tabBar.isHidden = false

UIView.animate(withDuration: duration, animations: {
tabBar.frame = frame.offsetBy(dx: 0, dy: offset)
}, completion: { (true) in
tabBar.isHidden = hidden
})
}




//첫번째 컨트롤에서 첫번째 컨트롤러를 종료하고 두번째 컨트롤러를 첫번째 컨트롤러에서 호출할려고 해서 안된다.

참고 : https://stackoverflow.com/questions/43566414/present-a-controller-dismiss-it-and-present-a-different-one-in-swift

weak var pvc = self.presentingViewController
self.dismiss(animated: true, completion: {

let viewController = MainViewController()
pvc?.present(viewController, animated: true, completion: nil)

})




플로팅 엑션 바
참고:https://stackoverflow.com/questions/48298984/insert-a-floating-action-button-on-uitableview-in-swift-4


1.
lazy var writeButton: UIButton = {
let button = UIButton(type: .system)
button.backgroundColor = UIColor(red:0.13, green:0.30, blue:0.53, alpha:1.0)

button.setTitle("로그인", for: UIControlState())
//button.translatesAutoresizingMaskIntoConstraints = false
button.setTitleColor(UIColor.white, for: UIControlState())
button.titleLabel?.font = UIFont.boldSystemFont(ofSize: 16)
button.frame = CGRect(x: 285, y: 485, width: 60, height: 60)
button.layer.cornerRadius = 10; // this value vary as per your desire
button.clipsToBounds = true
//button.addTarget(self, action: #selector(loginAction), for: .touchUpInside)
return button
}()

2. 뷰디드로드
tableView.addSubview(writeButton)


3. 오버라이드
override func scrollViewDidScroll(_ scrollView: UIScrollView) {

print("음음음음")
let  off = self.tableView.contentOffset.y

writeButton.frame = CGRect(x: 285, y:   off + 485, width: writeButton.frame.size.width, height: writeButton.frame.size.height)
}












//뷰컨트롤안에 뷰를 넣는 방법

참고:https://stackoverflow.com/questions/43150320/embed-uiviewcontroller-inside-a-uiview
참고:https://cocoacasts.com/managing-view-controllers-with-container-view-controllers/
As others said you can't embed a viewcontroller's view inside a view. What you can do is embed a viewcontroller inside another viewcontroller as a childviewcontroller.

Try replacing your newView code with:

let storyboard = UIStoryboard(name: "Main", bundle: nil)
var controller: UIViewController = storyboard.instantiateViewController(withIdentifier: "testView") as UIViewController

//add as a childviewcontroller
addChildViewController(controller)

// Add the child's View as a subview
self.view.addSubview(controller.view)
controller.view.frame = view.bounds
controller.view.autoresizingMask = [.flexibleWidth, .flexibleHeight]

// tell the childviewcontroller it's contained in it's parent
controller.didMove(toParentViewController: self)
EDIT: To change how and where the childviewcontroller appears, simply update it's frame. for example to make it half the height and anchored to the bottom:

controller.view.frame = CGRect(x: 0, y: view.center.y, width: view.size.width, height: view.size.height * 0.5)





//내가 만든 뷰 컨트롤러 안에 스크롤 뷰 넣는 방법

view.addSubview(uiScrollView)
uiScrollView.topAnchor.constraint(equalTo: view.topAnchor).isActive = true
uiScrollView.leadingAnchor.constraint(equalTo: view.leadingAnchor).isActive = true
uiScrollView.trailingAnchor.constraint(equalTo: view.trailingAnchor).isActive = true
uiScrollView.bottomAnchor.constraint(equalTo: view.bottomAnchor).isActive = true



let myView = UIView()
myView.backgroundColor = .blue
myView.translatesAutoresizingMaskIntoConstraints = false

uiScrollView.addSubview(myView)
myView.topAnchor.constraint(equalTo: uiScrollView.topAnchor).isActive = true
myView.leadingAnchor.constraint(equalTo: uiScrollView.leadingAnchor).isActive = true
myView.trailingAnchor.constraint(equalTo: uiScrollView.trailingAnchor).isActive = true
myView.bottomAnchor.constraint(equalTo: uiScrollView.bottomAnchor).isActive = true
myView.widthAnchor.constraint(equalTo: uiScrollView.widthAnchor).isActive = true
//myView.heightAnchor.constraint(equalToConstant: 2000).isActive = true



myView.addSubview(dateLabel)

dateLabel.topAnchor.constraint(equalTo: myView.topAnchor,constant: 150).isActive = true
dateLabel.centerXAnchor.constraint(equalTo: myView.centerXAnchor).isActive = true



myView.addSubview(txtLabel)
txtLabel.topAnchor.constraint(equalTo: dateLabel.bottomAnchor,constant: 45).isActive = true
txtLabel.leadingAnchor.constraint(equalTo: myView.leadingAnchor,constant: 35).isActive = true
txtLabel.trailingAnchor.constraint(equalTo: myView.trailingAnchor,constant: -35).isActive = true
//txtLabel.bottomAnchor.constraint(equalTo: nameLabel.bottomAnchor, constant: 0).isActive = true
//txtLabel.heightAnchor.constraint(equalTo: myView.heightAnchor).isActive = true

myView.addSubview(nameLabel)
nameLabel.topAnchor.constraint(equalTo: txtLabel.bottomAnchor, constant: 45).isActive = true
nameLabel.centerXAnchor.constraint(equalTo: myView.centerXAnchor).isActive = true
nameLabel.bottomAnchor.constraint(equalTo: myView.bottomAnchor, constant: -45).isActive = true

